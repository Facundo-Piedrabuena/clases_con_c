#include <stdio.h>
#include <string.h>

struct producto { 
	int id;
	char nombre[20];
	int stock;
};

/*Cargar productos*/
void cargarProductos(struct producto producto[], int n) {
	for (int i = 0; i < n; i++) { 
		printf("Ingrese id del producto: ");
		scanf("%d", &producto[i].id);
		printf("Ingrese el nombre del producto: ");
		scanf("%s", producto[i].nombre);
		printf("Ingrese el stock: ");
		scanf("%d", &producto[i].stock);
	}
}

/*Ordenamiento Burbuja por ID*/
void ordenamientoBurbuja(struct producto producto[], int n) {
	for (int i = 0; i < n-1; i++) {
		for (int j = 0; j < n-i-1; j++) {
			if (producto[j].id > producto[j+1].id) {
				struct producto temp = producto[j];
				producto[j] = producto[j+1];
				producto[j+1] = temp;
			}
		}
	}
}

/*BÃºsqueda binaria por ID*/
int busquedaBinaria(struct producto producto[], int n, int key) {
	int low = 0, high = n-1;
	while (low <= high) {
		int mid = (low + high) / 2;
		if (producto[mid].id == key)
			return mid;
		else if (producto[mid].id < key)
			low = mid + 1;
		else
			high = mid - 1;
	}
	return -1;
}

/*Mostrar productos*/
void mostrarProductos(struct producto producto[], int n) {
	printf("\nLista de productos:\n");
	for (int i = 0; i < n; i++) {
		printf("ID: %d, Nombre: %s, Stock: %d\n", producto[i].id, producto[i].nombre, producto[i].stock);
	}
}

void mostrarCadena(struct producto producto[], int n) {
	char cadena[500] = "";
	int i;
	for(i=0; i<n;i++) {
		strcat(cadena, producto[i].nombre);
		strcat(cadena, "*");
	}
	i=0;
	while(cadena[i] != '\0') {
		printf("%c", cadena[i]);
		i++;
	};
}

int main() {
	const int n = 3;
	struct producto producto[n];
	
	cargarProductos(producto, n);
	ordenamientoBurbuja(producto, n);
	mostrarProductos(producto, n);
	
	int idBuscar;
	printf("\nIngrese la ID a buscar: ");
	scanf("%d", &idBuscar);
	
	int pos = busquedaBinaria(producto, n, idBuscar);
	if (pos != -1)
		printf("Producto encontrado: %s (Stock: %d)\n", producto[pos].nombre, producto[pos].stock);
	else
		printf("Producto no encontrado.\n");
	
	mostrarCadena(producto, n);
	return 0;
}

